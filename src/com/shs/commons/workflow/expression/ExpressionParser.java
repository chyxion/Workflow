/* Generated By:JavaCC: Do not edit this line. ExpressionParser.java */
package com.shs.commons.workflow.expression;

import java.io.StringReader;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;
import java.util.Iterator;
import java.util.Vector;

import com.shs.commons.workflow.models.WfVar;
/**
 * 支持各种常用的表达式,表达式中可以含有流程变量: 算术： + ,-, *, /, % ,移位 << >> , ++, -- 逻辑: && , || , !
 * 关系: > , >= , < ,<= ,== , != expression :- conditionalOrExpression [ "="
 * expression ] conditionalOrExpression :- conditionalAndExpression ( "||"
 * conditionalAndExpression )* conditionalAndExpression :- inclusiveOrExpression
 * ( "&&" inclusiveOrExpression )* inclusiveOrExpression :-
 * exclusiveOrExpression ( "|" exclusiveOrExpression )* exclusiveOrExpression :-
 * andExpression ( "^" andExpression )* andExpression :- equalityExpression (
 * "&" equalityExpression )* equalityExpression :- relationalExpression ( ( "=="
 * | "!=" ) relationalExpression )* relationalExpression :- shiftExpression ( (
 * "<" | ">" | "<=" | ">=" ) shiftExpression )* shiftExpression :-
 * additiveExpression ( ( "<<" | ">>" | ">>>" ) additiveExpression )*
 * additiveExpression :- multiplicativeExpression ( ( "+" | "-" )
 * multiplicativeExpression )* multiplicativeExpression :- unaryExpression ( (
 * "*" | "/" | "%" ) unaryExpression )* unaryExpression :- ( "+" | "-" )
 * unaryExpression | preIncrementExpression | preDecrementExpression |
 * unaryExpressionNotPlusMinus preIncrementExpression :- "++" primaryExpression
 * preDecrementExpression :- "--" primaryExpression unaryExpressionNotPlusMinus
 * :- ( "~" | "!" ) unaryExpression | postfixExpression postfixExpression :-
 * primaryExpression [ "++" | "--" ] //IS EMPTY用于PARTICIPANT_SET类型
 * primaryExpression :- primaryPrefix ( primarySuffix )* primaryPrefix :-
 * literal | "(" expression ")" | IDENTIFIER
 * 
 * primarySuffix :- "[" expression "]"
 * 
 * literal :- INTEGER_LITERAL | FLOATING_POINT_LITERAL | CHARACTER_LITERAL |
 * STRING_LITERAL | booleanLiteral | nullLiteral booleanLiteral :- "true" |
 * "false" | "TRUE" | "FALSE" | "True" | "False" nullLiteral :- "null" | "Null"
 * | "NULL"
 */
public class ExpressionParser implements ExpressionParserConstants {
	Boolean T = new Boolean(true);
	Boolean F = new Boolean(false);

	public static int VAR_KIND_PARTICIPANT_SET = 100;

	Map<String, WfVar> varSet;
	Map<String, WfVar> localVarSet;
	Map<String, WfVar> modifiedVarSet;
	int execMode = 0;

	int mode = 0;
	HashSet varNameSet = null; // 脚本中的所用到的所有变量名，包含了全局变量名和局部变量名
	HashSet localVarNameSet = null; // 只保存局部变量名

	public ExpressionParser() {
		this(new java.io.StringReader(""));
	}

	void initializeStream(String langStr) {
		StringReader is = new StringReader(langStr);
		ReInit(is);
	}

	/**
	 * 得到表达式中用到的变量名 如果没有用到变量名返回长度为0的空数组，否则返回变量名的数组
	 */
	public String[] getExpressionVarNames(String exprStr) throws ParseException {
		if (exprStr == null)
			return new String[] {};
		if (exprStr.trim().equals(""))
			return new String[] {};
		initializeStream(exprStr);
		this.varSet = null;
		this.localVarSet = null;
		this.modifiedVarSet = null;

		this.execMode = 0;

		mode = 1; // 可以在表达式中更改全局变量
		varNameSet = new HashSet();
		localVarNameSet = new HashSet();
		try {
			justExpression(false);
			if (varNameSet.isEmpty())
				return new String[] {};
			String[] names = new String[varNameSet.size()];
			int i = 0;
			for (Iterator itr = varNameSet.iterator(); itr.hasNext(); i++) {
				names[i] = (String) itr.next();
			}
			return names;
		} catch (ParseException ex) {
			throw ex;
		} catch (TokenMgrError ex) {
			throw new ParseException(ex.getMessage());
		}
	}

	/**
	 * 得到脚本中定义的局部变量名的数组 如果没有定义局部变量名，那么返回长度为0的空数组
	 */
	public String[] getLocalVarNames() {
		if (localVarNameSet == null) {// 是执行脚本
			if (localVarSet == null)
				return new String[] {};
			else {
				if (localVarSet.isEmpty())
					return new String[] {};
				String[] names = new String[localVarSet.size()];
				int i = 0;
				for (Iterator<String> itr = localVarSet.keySet().iterator(); itr
						.hasNext(); i++) {
					names[i] = itr.next();
				}
				return names;
			}
		} else {// 是测试脚本，检测脚本的合法性
			if (localVarNameSet.isEmpty())
				return new String[] {};
			String[] names = new String[localVarNameSet.size()];
			int i = 0;
			for (Iterator<String> itr = localVarNameSet.iterator(); itr
					.hasNext(); i++) {
				names[i] = itr.next();
			}
			return names;
		}
	}

	/**
	 * 基于变量集varSet执行表达式exprStr，返回表达式的执行结果。
	 */
	public Object parseExpr(String exprStr, Map<String, WfVar> vars)
			throws ParseException {
		initializeStream(exprStr);
		this.varSet = vars;
		this.localVarSet = null;
		this.modifiedVarSet = null;

		this.execMode = 0;

		mode = 1; // 可以在表达式中更改全局变量
		varNameSet = null;
		localVarNameSet = null;
		return justExpression(true);
	}

	/**
	 * 取得脚本中的局部变量集合 如果没有定义局部变量，那么返回null
	 * 
	 * @return
	 */
	public Map<String, WfVar> getLocalVariableSet() {
		return localVarSet;
	}

	/**
	 * 根据变量名在局部变量集和全局变量集中查找变量，优先在局部变量集中查找。
	 */
	WfVar findVariable(String varName) {
		WfVar var = null;
		if (localVarSet != null)
			var = localVarSet.get(varName);
		if (var == null && varSet != null)
			var = varSet.get(varName);
		return var;
	}

	WfVar findLocalVariable(String varName) {
		WfVar var = null;
		if (localVarSet != null)
			var = localVarSet.get(varName);
		return var;
	}

	WfVar findGlobalVariable(String varName) {
		WfVar var = null;
		if (varSet != null)
			var = varSet.get(varName);
		return var;
	}

	/**
	 * 对象为空，返回false； 对象为Boolean对象，返回相应的布尔值；
	 * 对象为Character对象，如果字符值为0，返回false，否则返回true； 如果是长度为0的空串，返回false，否则返回true。
	 */
	boolean convertToBoolean(Object obj) {
		if (obj == null)
			return false;
		if (obj instanceof Boolean)
			return ((Boolean) obj).booleanValue();
		if (obj instanceof Number) {
			Number n = (Number) obj;
			if (n.floatValue() == 0.0)
				return false;
			else
				return true;
		}
		if (obj instanceof Character) {
			if (((Character) obj).charValue() == 0)
				return false;
			else
				return true;
		}
		if (obj instanceof String) {
			String s = (String) obj;
			if (s.length() == 0)
				return false;
			else
				return true;
		}
		return true;
	}

	Double convertToDouble(Object obj, int line, int column)
			throws ParseException {
		if (obj == null)
			throw new ParseException(
					"\u503c\u4e3anull, \u4e0d\u80fd\u8f6c\u6362\u6210\u6570\u503c\u7c7b\u578b, \u884c\u53f7: "
							+ line + " \u5217\u53f7: " + column);
		if (obj instanceof Double)
			return (Double) obj;
		if (obj instanceof Boolean) {
			boolean b = ((Boolean) obj).booleanValue();
			if (b)
				return new Double(1.0);
			else
				return new Double(0.0);
		}
		if (obj instanceof Number)
			return new Double(((Number) obj).doubleValue());
		if (obj instanceof Character)
			return new Double((double) ((Character) obj).charValue());
		throw new ParseException(
				"\u5bf9\u8c61\u65e0\u6cd5\u8f6c\u6362\u6210\u6570\u503c\u7c7b\u578b, \u884c\u53f7: "
						+ line + " \u5217\u53f7: " + column);
	}

	Long convertToLong(Object obj, int line, int column) throws ParseException {
		return new Long(convertToDouble(obj, line, column).longValue());
	}

	Character convertCharacterLiteralToCharacter(String characterLiteral) {
		if (characterLiteral.length() == 0)
			return new Character('\0');
		char c = characterLiteral.charAt(0);
		if (c != '\\')
			return new Character(c);
		else {
			c = characterLiteral.charAt(1);
			switch (c) {
			case 'n':
				return new Character('\n');
			case 't':
				return new Character('\t');
			case 'b':
				return new Character('\b');
			case 'r':
				return new Character('\r');
			case 'f':
				return new Character('\f');
			case '\\':
				return new Character('\\');
			case '\'':
				return new Character('\'');
			case '\"':
				return new Character('\"');
			}
			if (c >= '0' && c <= '7') {
				String s = characterLiteral.substring(1);
				c = (char) Integer.parseInt(s, 8);
				return new Character(c);
			}
		}
		return new Character('\0');
	}

	/**
	 * 如果字符串没有带双引号，那么就是变量名，首先查找局部变量，再查找全局变量，返回变量的值； 如果字符串带双引号，那么去掉双引号，返回字符串的值。
	 */
	Object convertVariableNameAndString(Object value, int line, int column)
			throws ParseException {
		if (value == null)
			return value;
		if (value instanceof String) {
			String s = (String) value;
			if (s.length() == 0)
				return value;
			if (s.charAt(0) == '\"')
				return s.substring(1, s.length() - 1);
			else {
				// 字符串没有带双引号，那么就是变量名
				// 首先查找局部变量，再查找全局变量
				WfVar var = findVariable(s);
				if (var == null)
					throw new ParseException(
							"\u53d8\u91cf\u672a\u5b9a\u4e49, \u53d8\u91cf\u540d: "
									+ s + " , \u884c\u53f7: " + line
									+ " \u5217\u53f7: " + column);
				return var.getValue();
			}
		} else
			return value;
	}

	/**
	 * Raw string is a string obtained from parser, with double quatations at
	 * the head and the tail of the string, and escape characters, e.g.
	 * "abcd\r123\ndfg\\h\"hhh\012lkj" is a raw string.
	 * <p/>
	 * The internal representation is models change the escape character models
	 * its code (normally ascii code or Unicode).
	 * 
	 * @param str
	 *            raw string models be parsed
	 * @return internal representation of the raw string
	 */
	private String removeEscapes(String str) {
		char c;
		StringBuffer sbuf = new StringBuffer();
		for (int i = 0; i < str.length(); i++) {
			c = str.charAt(i);
			if (c == '\\') {
				try {
					c = str.charAt(++i);
					if ((c >= '0') && (c <= '7')) {
						String ascii = "" + c;
						int count = 1;
						while (true) {
							c = str.charAt(++i);
							count++;
							if ((count <= 3) && (c >= '0') && (c <= '7'))
								ascii += c;
							if ((!(c >= '0') && (c <= '7'))) {
								i--; // pusk back one char that is not a numeric
										// char
								break;
							}
							if (count == 3)
								break;
						}// while
						sbuf.append((char) (Integer.parseInt(ascii, 8)));
					}// if
					else {// the char following \ is not a numeric char
						switch (c) {
						case 'n':
							sbuf.append("\n");
							break;
						case 't':
							sbuf.append("\t");
							break;
						case 'b':
							sbuf.append("\b");
							break;
						case 'r':
							sbuf.append("\r");
							break;
						case 'f':
							sbuf.append("\f");
							break;
						case '\\':
							sbuf.append("\\");
							break;
						case 'u': {
							c = str.charAt(++i);
							if (((c >= '0') && (c <= '9'))
									|| ((c >= 'a') && (c <= 'f'))
									|| ((c >= 'A') && (c <= 'F'))) {
								String ascii = "" + c;
								int count = 1;
								while (true) {
									c = str.charAt(++i);
									count++;
									if ((count <= 4)
											&& (((c >= '0') && (c <= '9'))
													|| ((c >= 'a') && (c <= 'f')) || ((c >= 'A') && (c <= 'F'))))
										ascii += c;
									if (!(((c >= '0') && (c <= '9'))
											|| ((c >= 'a') && (c <= 'f')) || ((c >= 'A') && (c <= 'F')))) {
										i--; // pusk back one char that is not a
												// numeric char
										break;
									}
									if (count == 4)
										break;
								}// while
								sbuf
										.append((char) (Integer.parseInt(ascii,
												16)));
							}// if
							break;
						}
						default:
							sbuf.append(c);
						}// switch
					}// else
				} catch (Exception ex) {
					ex.printStackTrace();
					break;
				}
			} else {
				sbuf.append(c); // not escape char
			}
		}// for
		return sbuf.toString();
	}

	/**
	 * 只是用于表达式运算
	 */
	final public Object justExpression(boolean isDo) throws ParseException {
		Object v = null;
		v = expression(isDo);
		jj_consume_token(0);
		return v;
	}

	// mode == 1, just expression
	// mode == 2, for assign policy
	final public Object expression(boolean isDo) throws ParseException {
		WrapperObject rv1 = null;
		Object v2 = null;
		Token tOpr = null;
		int line = 0, column = 0;
		boolean assignExpr = false;
		rv1 = conditionalOrExpression(isDo);
		if (isDo) {
			line = token_source.input_stream.getBeginLine();
			column = token_source.input_stream.getBeginColumn();
		}
		switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
		case 76:
			tOpr = jj_consume_token(76);
			v2 = expression(isDo);
			assignExpr = true;
			break;
		default:
			jj_la1[0] = jj_gen;
			;
		}
		if (isDo) {
			if (!assignExpr) { // 不是赋值表达式
				Object v = rv1.getValue();
				{
					if (true)
						return convertVariableNameAndString(v, line, column);
				}
			} else {// assign expr
				if (rv1.isSimple()) { // no container
					Object v = rv1.getValue();
					if (v instanceof String) {
						String s = (String) v;
						if (s.charAt(0) != '\"') { // 是流程变量
							WfVar var = null;
							if (mode == 1)
								var = findVariable(s);
							if (mode == 2)
								var = findLocalVariable(s);
							if (var == null) {
								if (true)
									throw new ParseException(
											"\u53d8\u91cf\u672a\u5b9a\u4e49, \u53d8\u91cf\u540d: "
													+ s + " , \u884c\u53f7: "
													+ tOpr.beginLine
													+ " \u5217\u53f7: "
													+ tOpr.beginColumn);
							}
							try {
								var.setValue(v2);
								{
									if (true)
										return v2;
								}
							} catch (Exception e) {
								{
									if (true)
										throw new ParseException(
												"\u8868\u8fbe\u5f0f\u8fd4\u56de\u503c\u548c\u53d8\u91cf\u7684\u7c7b\u578b\u4e0d\u5339\u914d, \u53d8\u91cf\u540d: "
														+ var.getName()
														+ " \u7c7b\u578b: "
														+ var.getType()
														+ " \u503c\u7c7b\u578b: "
														+ v2.getClass()
																.getName()
														+ "\u3002\u884c\u53f7: "
														+ tOpr.beginLine
														+ ", \u5217\u53f7: "
														+ tOpr.beginColumn);
								}
							}
						} else {
							if (true)
								throw new ParseException(
										"\u8d4b\u503c\u7b26\u53f7\u5de6\u8fb9\u4e0d\u662f\u4e00\u4e2a\u6570\u636e\u5bf9\u8c61\u7684\u5bb9\u5668, \u884c\u53f7: "
												+ tOpr.beginLine
												+ " \u5217\u53f7: "
												+ tOpr.beginColumn);
						}
					} else {
						if (true)
							throw new ParseException(
									"\u8d4b\u503c\u7b26\u53f7\u5de6\u8fb9\u4e0d\u662f\u4e00\u4e2a\u6570\u636e\u5bf9\u8c61\u7684\u5bb9\u5668, \u884c\u53f7: "
											+ tOpr.beginLine
											+ " \u5217\u53f7: "
											+ tOpr.beginColumn);
					}
				}// end isSimple

			} // end assign expr
		} // end isDo
		else {
			if (true)
				return null;
		}
		throw new Error("Missing return statement in function");
	}

	final public WrapperObject conditionalOrExpression(boolean isDo)
			throws ParseException {
		WrapperObject rv1, rv2, retv;
		Object v1 = null, v2 = null;
		boolean first = true;
		boolean tmpv = true;
		Token tOpr = null;
		rv1 = conditionalAndExpression(isDo);
		label_1: while (true) {
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
			case 77:
				;
				break;
			default:
				jj_la1[1] = jj_gen;
				break label_1;
			}
			tOpr = jj_consume_token(77);
			rv2 = conditionalAndExpression(isDo);
			if (isDo) {
				v2 = rv2.getValue();
				if (first) {
					v1 = convertVariableNameAndString(rv1.getValue(),
							tOpr.beginLine, tOpr.beginColumn);
					tmpv = convertToBoolean(v1);
					first = false;
				}
				v2 = convertVariableNameAndString(rv2.getValue(),
						tOpr.beginLine, tOpr.beginColumn);
				boolean b = convertToBoolean(v2);
				tmpv = tmpv || b;
			}
		}
		if (isDo) {
			if (first) {
				return rv1;
			} else {
				retv = new WrapperObject();
				retv.setValue(new Boolean(tmpv));
				return retv;
			}
		} else {
			return null;
		}
	}

	final public WrapperObject conditionalAndExpression(boolean isDo)
			throws ParseException {
		WrapperObject rv1, rv2, retv;
		Object v1 = null, v2 = null;
		boolean first = true;
		boolean tmpv = true;
		Token tOpr = null;
		rv1 = inclusiveOrExpression(isDo);
		label_2: while (true) {
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
			case 78:
				;
				break;
			default:
				jj_la1[2] = jj_gen;
				break label_2;
			}
			tOpr = jj_consume_token(78);
			rv2 = inclusiveOrExpression(isDo);
			if (isDo) {
				if (first) {
					v1 = convertVariableNameAndString(rv1.getValue(),
							tOpr.beginLine, tOpr.beginColumn);
					tmpv = convertToBoolean(v1);
					first = false;
				}
				v2 = convertVariableNameAndString(rv2.getValue(), tOpr.endLine,
						tOpr.endColumn);
				boolean b = convertToBoolean(v2);
				tmpv = tmpv && b;
			}
		}
		if (isDo) {
			if (first) {
				{
					if (true)
						return rv1;
				}
			} else {
				retv = new WrapperObject();
				retv.setValue(new Boolean(tmpv));
				{
					if (true)
						return retv;
				}
			}
		} else {
			if (true)
				return null;
		}
		throw new Error("Missing return statement in function");
	}

	final public WrapperObject inclusiveOrExpression(boolean isDo)
			throws ParseException {
		WrapperObject rv1, rv2, retv;
		Object v1 = null, v2 = null;
		boolean first = true;
		long tmpv = 0;
		Token tOpr;
		rv1 = exclusiveOrExpression(isDo);
		label_3: while (true) {
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
			case 79:
				;
				break;
			default:
				jj_la1[3] = jj_gen;
				break label_3;
			}
			tOpr = jj_consume_token(79);
			rv2 = exclusiveOrExpression(isDo);
			if (isDo) {
				if (first) {
					v1 = convertVariableNameAndString(rv1.getValue(),
							tOpr.beginLine, tOpr.beginColumn);
					tmpv = convertToLong(v1, tOpr.beginLine, tOpr.beginColumn)
							.longValue();
					first = false;
				}
				v2 = convertVariableNameAndString(rv2.getValue(),
						tOpr.beginLine, tOpr.beginColumn);
				long n = convertToLong(v2, tOpr.endLine, tOpr.endColumn)
						.longValue();
				tmpv = tmpv | n;
			}
		}
		if (isDo) {
			if (first) {
				{
					if (true)
						return rv1;
				}
			} else {
				retv = new WrapperObject();
				retv.setValue(new Long(tmpv));
				{
					if (true)
						return retv;
				}
			}
		} else {
			if (true)
				return null;
		}
		throw new Error("Missing return statement in function");
	}

	final public WrapperObject exclusiveOrExpression(boolean isDo)
			throws ParseException {
		WrapperObject rv1, rv2, retv;
		Object v1 = null, v2 = null;
		boolean first = true;
		long tmpv = 0;
		Token tOpr;
		rv1 = andExpression(isDo);
		label_4: while (true) {
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
			case 80:
				;
				break;
			default:
				jj_la1[4] = jj_gen;
				break label_4;
			}
			tOpr = jj_consume_token(80);
			rv2 = andExpression(isDo);
			if (isDo) {
				if (first) {
					v1 = convertVariableNameAndString(rv1.getValue(),
							tOpr.beginLine, tOpr.beginColumn);
					tmpv = convertToLong(v1, tOpr.beginLine, tOpr.beginColumn)
							.longValue();
					first = false;
				}
				v2 = convertVariableNameAndString(rv2.getValue(), tOpr.endLine,
						tOpr.endColumn);
				long n = convertToLong(v2, tOpr.endLine, tOpr.endColumn)
						.longValue();
				tmpv = tmpv ^ n;
			}
		}
		if (isDo) {
			if (first) {
				{
					if (true)
						return rv1;
				}
			} else {
				retv = new WrapperObject();
				retv.setValue(new Long(tmpv));
				{
					if (true)
						return retv;
				}
			}
		} else {
			if (true)
				return null;
		}
		throw new Error("Missing return statement in function");
	}

	final public WrapperObject andExpression(boolean isDo)
			throws ParseException {
		WrapperObject rv1, rv2, retv;
		Object v1 = null, v2 = null;
		boolean first = true;
		long tmpv = 0;
		Token tOpr;
		rv1 = equalityExpression(isDo);
		label_5: while (true) {
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
			case 81:
				;
				break;
			default:
				jj_la1[5] = jj_gen;
				break label_5;
			}
			tOpr = jj_consume_token(81);
			rv2 = equalityExpression(isDo);
			if (isDo) {
				if (first) {
					v1 = convertVariableNameAndString(rv1.getValue(),
							tOpr.beginLine, tOpr.beginColumn);
					tmpv = convertToLong(v1, tOpr.beginLine, tOpr.beginColumn)
							.longValue();
					first = false;
				}
				v2 = convertVariableNameAndString(rv2.getValue(), tOpr.endLine,
						tOpr.endColumn);
				long n = convertToLong(v2, tOpr.endLine, tOpr.endColumn)
						.longValue();
				tmpv = tmpv & n;
			}
		}
		if (isDo) {
			if (first) {
				{
					if (true)
						return rv1;
				}
			} else {
				retv = new WrapperObject();
				retv.setValue(new Long(tmpv));
				{
					if (true)
						return retv;
				}
			}
		} else {
			if (true)
				return null;
		}
		throw new Error("Missing return statement in function");
	}

	final public WrapperObject equalityExpression(boolean isDo)
			throws ParseException {
		WrapperObject rv1 = null, rv2 = null, retv = null;
		Object v1 = null, v2 = null;
		boolean first = true;
		Object tmpv = null;
		Token tOpr;
		rv1 = relationalExpression(isDo);
		label_6: while (true) {
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
			case 82:
			case 83:
				;
				break;
			default:
				jj_la1[6] = jj_gen;
				break label_6;
			}
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
			case 82:
				tOpr = jj_consume_token(82);
				break;
			case 83:
				tOpr = jj_consume_token(83);
				break;
			default:
				jj_la1[7] = jj_gen;
				jj_consume_token(-1);
				throw new ParseException();
			}
			rv2 = relationalExpression(isDo);
			if (isDo) {
				if (first) {
					tmpv = convertVariableNameAndString(rv1.getValue(),
							tOpr.beginLine, tOpr.beginColumn);
					first = false;
				}
				v2 = convertVariableNameAndString(rv2.getValue(),
						tOpr.beginLine, tOpr.beginColumn);
				tmpv = Comparator.compare(tOpr.image, tmpv, v2, tOpr.beginLine,
						tOpr.beginColumn);
			}
		}
		if (isDo) {
			if (first) {
				{
					if (true)
						return rv1;
				}
			} else {
				retv = new WrapperObject();
				retv.setValue(tmpv);
				{
					if (true)
						return retv;
				}
			}
		} else {
			if (true)
				return null;
		}
		throw new Error("Missing return statement in function");
	}

	final public WrapperObject relationalExpression(boolean isDo)
			throws ParseException {
		WrapperObject rv1 = null, rv2 = null, retv = null;
		Object v1 = null, v2 = null;
		Token tOpr;
		boolean first = true;
		Object tmpv = null;
		rv1 = shiftExpression(isDo);
		label_7: while (true) {
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
			case LIKE:
			case IN:
			case 84:
			case 85:
			case 86:
			case 87:
				;
				break;
			default:
				jj_la1[8] = jj_gen;
				break label_7;
			}
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
			case 84:
				tOpr = jj_consume_token(84);
				break;
			case 85:
				tOpr = jj_consume_token(85);
				break;
			case 86:
				tOpr = jj_consume_token(86);
				break;
			case 87:
				tOpr = jj_consume_token(87);
				break;
			case LIKE:
				tOpr = jj_consume_token(LIKE);
				break;
			case IN:
				tOpr = jj_consume_token(IN);
				break;
			default:
				jj_la1[9] = jj_gen;
				jj_consume_token(-1);
				throw new ParseException();
			}
			rv2 = shiftExpression(isDo);
			if (isDo) {
				if (first) {
					tmpv = convertVariableNameAndString(rv1.getValue(),
							tOpr.beginLine, tOpr.beginColumn);
					first = false;
				}
				v2 = convertVariableNameAndString(rv2.getValue(),
						tOpr.beginLine, tOpr.beginColumn);
				tmpv = Comparator.compare(tOpr.image, tmpv, v2, tOpr.beginLine,
						tOpr.beginColumn);
			}
		}
		if (isDo) {
			if (first) {
				{
					if (true)
						return rv1;
				}
			} else {
				retv = new WrapperObject();
				retv.setValue(tmpv);
				{
					if (true)
						return retv;
				}
			}
		} else {
			if (true)
				return null;
		}
		throw new Error("Missing return statement in function");
	}

	final public WrapperObject shiftExpression(boolean isDo)
			throws ParseException {
		WrapperObject rv1 = null, rv2 = null, retv = null;
		Object v1 = null, v2 = null;
		Token tOpr = null;
		boolean first = true;
		long tmpv = 0;
		rv1 = additiveExpression(isDo);
		label_8: while (true) {
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
			case 88:
			case 89:
			case 90:
				;
				break;
			default:
				jj_la1[10] = jj_gen;
				break label_8;
			}
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
			case 88:
				tOpr = jj_consume_token(88);
				break;
			case 89:
				tOpr = jj_consume_token(89);
				break;
			case 90:
				tOpr = jj_consume_token(90);
				break;
			default:
				jj_la1[11] = jj_gen;
				jj_consume_token(-1);
				throw new ParseException();
			}
			rv2 = additiveExpression(isDo);
			if (isDo) {
				if (first) {
					v1 = convertVariableNameAndString(rv1.getValue(),
							tOpr.beginLine, tOpr.beginColumn);
					tmpv = convertToLong(v1, tOpr.beginLine, tOpr.beginColumn)
							.longValue();
					first = false;
				}
				v2 = convertVariableNameAndString(rv2.getValue(),
						tOpr.beginLine, tOpr.beginColumn);
				long n = convertToLong(v2, tOpr.endLine, tOpr.endColumn)
						.longValue();
				if (tOpr.image.equals("<<"))
					tmpv = tmpv << n;
				if (tOpr.image.equals(">>"))
					tmpv = tmpv >> n;
				if (tOpr.image.equals(">>>"))
					tmpv = tmpv >>> n;
			}
		}
		if (isDo) {
			if (first) {
				{
					if (true)
						return rv1;
				}
			} else {
				retv = new WrapperObject();
				retv.setValue(new Long(tmpv));
				{
					if (true)
						return retv;
				}
			}
		} else {
			if (true)
				return null;
		}
		throw new Error("Missing return statement in function");
	}

	final public WrapperObject additiveExpression(boolean isDo)
			throws ParseException {
		WrapperObject rv1 = null, rv2 = null, retv = null;
		Object v1 = null, v2 = null;
		Token tOpr = null;
		boolean first = true;
		int exprKind = 0;
		double tmpv = 0.0;
		StringBuffer tmpStrBuffer = null;
		Set tmpvPset = null;
		rv1 = multiplicativeExpression(isDo);
		label_9: while (true) {
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
			case UNION:
			case 91:
			case 92:
				;
				break;
			default:
				jj_la1[12] = jj_gen;
				break label_9;
			}
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
			case 91:
				tOpr = jj_consume_token(91);
				break;
			case 92:
				tOpr = jj_consume_token(92);
				break;
			case UNION:
				tOpr = jj_consume_token(UNION);
				break;
			default:
				jj_la1[13] = jj_gen;
				jj_consume_token(-1);
				throw new ParseException();
			}
			rv2 = multiplicativeExpression(isDo);
			if (isDo) {
				if (tOpr.image.equals("+") || tOpr.image.equals("-")) { // 处理非参与者集合
					if (first) {
						v1 = convertVariableNameAndString(rv1.getValue(),
								tOpr.beginLine, tOpr.beginColumn);
						if (v1 instanceof String) {// 是字符串
							tmpStrBuffer = new StringBuffer();
							tmpStrBuffer.append((String) v1);
							exprKind = 1;// 字符串连接运算
						}// 结束处理＋、－运算第一个左操作数为字符串的情形
						else { // 数值运算, 如果是非字符串的情形，直接转成数值
							tmpv = convertToDouble(v1, tOpr.endLine,
									tOpr.endColumn).doubleValue();
							exprKind = 2; // 数值运算
						}
						first = false;
					}// 结束if first
					else {// 如果是不是第一个，并且前面的运算是参与者集合运算，那么无法进行加减运算
						if (exprKind == 3) {
							if (true)
								throw new ParseException(
										"\u7b97\u7b26\u5de6\u8fb9\u503c\u7c7b\u578b\u662fPARTICIPANT_SET, \u4e0d\u80fd\u53c2\u4e0e\u6570\u503c\u8fd0\u7b97, \u884c\u53f7: "
												+ tOpr.beginLine
												+ " \u5217\u53f7: "
												+ tOpr.beginColumn);
						}
					}
					v2 = convertVariableNameAndString(rv2.getValue(),
							tOpr.beginLine, tOpr.beginColumn);
					if (exprKind == 1) {// 字符串运算
						if (tOpr.image.equals("+")) {
							tmpStrBuffer.append(v2.toString());
						} else {
							if (true)
								throw new ParseException(
										"\u51cf\u8fd0\u7b97\u4e0d\u80fd\u7528\u4e8e\u5b57\u7b26\u4e32\u7c7b\u578b, \u884c\u53f7: "
												+ tOpr.beginLine
												+ " \u5217\u53f7: "
												+ tOpr.beginColumn);
						}
					} else { // 数值运算
						double n = convertToDouble(v2, tOpr.endLine,
								tOpr.endColumn).doubleValue();
						if (tOpr.image.equals("+"))
							tmpv = tmpv + n;
						else if (tOpr.image.equals("-"))
							tmpv = tmpv - n;
					}
				}// end of +, -
				else {// begin of UNION
					if (first) {
						v1 = convertVariableNameAndString(rv1.getValue(),
								tOpr.endLine, tOpr.endColumn);
						if (!(v1 instanceof Set)) {
							if (true)
								throw new ParseException(
										"\u96c6\u5408\u8fd0\u7b97\u7b26UNION\u5de6\u8fb9\u8868\u8fbe\u5f0f\u7684\u503c\u4e0d\u662f\u96c6\u5408\u7c7b\u578b, \u884c\u53f7:"
												+ tOpr.beginLine
												+ " \u5217\u53f7: "
												+ tOpr.beginColumn);
						}
						tmpvPset = (Set) v1;
						first = false;
						exprKind = 3;
					} else {
						if (exprKind != 3) {
							if (true)
								throw new ParseException(
										"\u96c6\u5408\u8fd0\u7b97\u7b26UNION\u5de6\u8fb9\u8868\u8fbe\u5f0f\u7684\u503c\u4e0d\u662f\u96c6\u5408\u7c7b\u578b, \u884c\u53f7:"
												+ tOpr.beginLine
												+ " \u5217\u53f7: "
												+ tOpr.beginColumn);
						}
					}
					v2 = convertVariableNameAndString(rv2.getValue(),
							tOpr.endLine, tOpr.endColumn);
					if (!(v2 instanceof Set)) {
						if (true)
							throw new ParseException(
									"\u96c6\u5408\u8fd0\u7b97\u7b26UNION\u53f3\u8fb9\u8868\u8fbe\u5f0f\u7684\u503c\u4e0d\u662f\u96c6\u5408\u7c7b\u578b, \u884c\u53f7:"
											+ tOpr.endLine
											+ " \u5217\u53f7: "
											+ tOpr.endColumn);
					}
					Set set2 = (Set) v2;
					tmpvPset.addAll(set2);
				}// end of UNION
			}// end of isDo

		}
		if (isDo) {
			if (first) {
				{
					if (true)
						return rv1;
				}
			} else {
				retv = new WrapperObject();
				if (exprKind == 1) {
					retv.setValue("\"" + tmpStrBuffer.toString() + "\"");
				} else if (exprKind == 2) {
					retv.setValue(new Double(tmpv));
				} else {
					retv.setValue(tmpvPset);
				}
				{
					if (true)
						return retv;
				}
			}
		}// end of isDo
		else {
			if (true)
				return null;
		}
		throw new Error("Missing return statement in function");
	}

	final public WrapperObject multiplicativeExpression(boolean isDo)
			throws ParseException {
		WrapperObject rv1, rv2;
		boolean first = true;
		double tmpv = 0.0;
		Token tOpr;
		Set tmpvPset = null;
		boolean numExpr = true;
		WrapperObject retv = null;
		Object v1 = null, v2 = null;
		rv1 = unaryExpression(isDo);
		if (isDo)
			v1 = rv1.getValue();
		label_10: while (true) {
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
			case INTERSECT:
			case 93:
			case 94:
			case 95:
				;
				break;
			default:
				jj_la1[14] = jj_gen;
				break label_10;
			}
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
			case 93:
				tOpr = jj_consume_token(93);
				break;
			case 94:
				tOpr = jj_consume_token(94);
				break;
			case 95:
				tOpr = jj_consume_token(95);
				break;
			case INTERSECT:
				tOpr = jj_consume_token(INTERSECT);
				break;
			default:
				jj_la1[15] = jj_gen;
				jj_consume_token(-1);
				throw new ParseException();
			}
			rv2 = unaryExpression(isDo);
			if (isDo) {
				v2 = rv2.getValue();
				if (tOpr.image.equals("INTERSECT")) {
					if (first) {
						Object v3 = convertVariableNameAndString(v1,
								tOpr.beginLine, tOpr.beginColumn);
						if (!(v3 instanceof Set)) {
							if (true)
								throw new ParseException(
										"\u96c6\u5408\u8fd0\u7b97\u7b26INTERSECT\u5de6\u8fb9\u8868\u8fbe\u5f0f\u7684\u503c\u4e0d\u662f\u96c6\u5408\u7c7b\u578b, \u884c\u53f7:"
												+ tOpr.beginLine
												+ " \u5217\u53f7: "
												+ tOpr.beginColumn);
						}
						tmpvPset = (Set) v3;
						first = false;
						numExpr = false;
					} else {
						if (numExpr) {
							if (true)
								throw new ParseException(
										"\u96c6\u5408\u8fd0\u7b97\u7b26INTERSECT\u5de6\u8fb9\u8868\u8fbe\u5f0f\u7684\u503c\u4e0d\u662f\u96c6\u5408\u7c7b\u578b, \u884c\u53f7:"
												+ tOpr.beginLine
												+ " \u5217\u53f7: "
												+ tOpr.beginColumn);
						}
					}
					Object v4 = convertVariableNameAndString(v2,
							tOpr.beginLine, tOpr.beginColumn);
					if (!(v4 instanceof Set)) {
						if (true)
							throw new ParseException(
									"\u96c6\u5408\u8fd0\u7b97\u7b26INTERSECT\u53f3\u8fb9\u8868\u8fbe\u5f0f\u7684\u503c\u4e0d\u662f\u96c6\u5408\u7c7b\u578b, \u884c\u53f7:"
											+ tOpr.endLine
											+ " \u5217\u53f7: "
											+ tOpr.endColumn);
					}
					Set set2 = (Set) v4;
					tmpvPset.retainAll(set2);
				}// end of INTERSECT
				else {// 数值运算
					if (first) {
						Object v3 = convertVariableNameAndString(v1,
								tOpr.beginLine, tOpr.beginColumn);
						tmpv = convertToDouble(v3, tOpr.endLine, tOpr.endColumn)
								.doubleValue();
						first = false;
						numExpr = true;
					} else {
						if (!numExpr) {
							if (true)
								throw new ParseException(
										"\u7b97\u7b26\u5de6\u8fb9\u503c\u7c7b\u578b\u662fPARTICIPANT_SET, \u4e0d\u80fd\u53c2\u4e0e\u6570\u503c\u8fd0\u7b97, \u884c\u53f7:"
												+ tOpr.endLine
												+ " \u5217\u53f7: "
												+ tOpr.endColumn);
						}
					}
					Object v4 = convertVariableNameAndString(v2,
							tOpr.beginLine, tOpr.beginColumn);
					double n = convertToDouble(v4, tOpr.endLine, tOpr.endColumn)
							.doubleValue();
					if (tOpr.image.equals("*"))
						tmpv = tmpv * n;
					else if (tOpr.image.equals("/"))
						tmpv = tmpv / n;
					else if (tOpr.image.equals("%")) {
						long l1 = (long) tmpv;
						long l2 = (long) n;
						tmpv = (double) (l1 % l2);
					}
				}
			}
		}
		if (isDo) {
			if (first) {
				{
					if (true)
						return rv1;
				}
			} else {
				if (numExpr) {
					retv = new WrapperObject();
					retv.setValue(new Double(tmpv));
					{
						if (true)
							return retv;
					}
				} else {
					retv = new WrapperObject();
					retv.setValue(tmpvPset);
					{
						if (true)
							return retv;
					}
				}
			}// end of not first
		} else {
			if (true)
				return null;
		}
		throw new Error("Missing return statement in function");
	}

	final public WrapperObject unaryExpression(boolean isDo)
			throws ParseException {
		Token tOpr;
		WrapperObject rv = null, retv = null;
		switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
		case 91:
		case 92:
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
			case 91:
				tOpr = jj_consume_token(91);
				break;
			case 92:
				tOpr = jj_consume_token(92);
				break;
			default:
				jj_la1[16] = jj_gen;
				jj_consume_token(-1);
				throw new ParseException();
			}
			rv = unaryExpression(isDo);
			if (isDo) {
				Object v = rv.getValue();
				Object v1 = convertVariableNameAndString(v, tOpr.beginLine,
						tOpr.beginColumn);
				if (v1 instanceof Number) {
					retv = new WrapperObject();
					Double n = convertToDouble(v1, tOpr.endLine, tOpr.endColumn);
					if (tOpr.image.equals("-")) {
						retv.setValue(new Double(-n.doubleValue()));
						{
							if (true)
								return retv;
						}
					} else {
						retv.setValue(n);
						{
							if (true)
								return retv;
						}
					}
				} else {
					if (true)
						throw new ParseException(
								"\u6570\u636e\u5bf9\u8c61\u65e0\u6cd5\u8fdb\u884c\u6539\u53d8\u7b26\u53f7\u8fd0\u7b97, \u884c\u53f7: "
										+ tOpr.beginLine
										+ " \u5217\u53f7: "
										+ tOpr.beginColumn);
				}
			} else {
				if (true)
					return null;
			}
			break;
		case 96:
			retv = preIncrementExpression(isDo);
			if (isDo) {
				if (true)
					return retv;
			} else {
				if (true)
					return null;
			}
			break;
		case 97:
			retv = preDecrementExpression(isDo);
			if (isDo) {
				if (true)
					return retv;
			} else {
				if (true)
					return null;
			}
			break;
		case NULL:
		case TRUE:
		case FALSE:
		case INTEGER_LITERAL:
		case FLOATING_POINT_LITERAL:
		case CHARACTER_LITERAL:
		case STRING_LITERAL:
		case IDENTIFIER:
		case LPAREN:
		case 98:
		case 99:
			retv = unaryExpressionNotPlusMinus(isDo);
			if (isDo) {
				{
					if (true)
						return retv;
				}
			} else {
				if (true)
					return null;
			}
			break;
		default:
			jj_la1[17] = jj_gen;
			jj_consume_token(-1);
			throw new ParseException();
		}
		throw new Error("Missing return statement in function");
	}

	final public WrapperObject preIncrementExpression(boolean isDo)
			throws ParseException {
		WrapperObject rv = null;
		WrapperObject retv = null;
		Token tOpr;
		int line = 0, column = 0;
		tOpr = jj_consume_token(96);
		rv = primaryExpression(isDo);
		if (isDo) {
			line = token_source.input_stream.getBeginLine();
			column = token_source.input_stream.getBeginColumn();
		}
		if (isDo) {
			Object v = rv.getValue();
			// 如果是字符串，区分是否变量名还是字符串常量
			WfVar var = null;
			Object varValue = null;
			if (v instanceof String) {
				String s = (String) v;
				if (s.charAt(0) != '\"') {
					// 字符串没有带双引号，那么就是变量名
					// 查找局部变量，全局变量不能改变值，要用SET语句
					if (mode == 1)
						var = findVariable(s);
					if (mode == 2)
						var = findLocalVariable(s);
					if (var == null) {
						if (true)
							throw new ParseException(
									"\u53d8\u91cf\u672a\u5b9a\u4e49, \u53d8\u91cf\u540d: "
											+ s + " , \u884c\u53f7: " + line
											+ " \u5217\u53f7: " + column);
					}
				} else {
					if (true)
						throw new ParseException(
								"\u6570\u636e\u5bf9\u8c61\u4e0d\u80fd\u8fdb\u884c\u81ea\u589e\u64cd\u4f5c, \u884c\u53f7: "
										+ line + " \u5217\u53f7: " + column);
				}
				varValue = var.getValue();
				if (varValue == null || !(varValue instanceof Number)) {
					if (true)
						throw new ParseException(
								"\u6570\u636e\u5bf9\u8c61\u4e0d\u80fd\u8fdb\u884c\u81ea\u589e\u64cd\u4f5c, \u884c\u53f7: "
										+ line + " \u5217\u53f7: " + column);
				}
			}
			double n = 0.0;
			if (var != null) {
				n = ((Number) varValue).doubleValue();
				n = n + 1.0;
				try {
					var.setValue(new Double(n));
				} catch (Exception e) {
				}
				retv = new WrapperObject();
				retv.setContainer(var);
				retv.setValue(var.getValue()); // 实际返回的值
				{
					if (true)
						return retv;
				}
			} else if (v instanceof Number) {
				retv = new WrapperObject();
				n = ((Number) v).doubleValue();
				retv.setValue(new Double(n + 1.0));
				{
					if (true)
						return retv;
				}
			} else {
				if (true)
					throw new ParseException(
							"\u6570\u636e\u5bf9\u8c61\u4e0d\u80fd\u8fdb\u884c\u81ea\u589e\u64cd\u4f5c, \u884c\u53f7: "
									+ tOpr.endLine
									+ " \u5217\u53f7: "
									+ tOpr.endColumn);
			}
		} else {
			if (true)
				return null;
		}
		throw new Error("Missing return statement in function");
	}

	final public WrapperObject preDecrementExpression(boolean isDo)
			throws ParseException {
		WrapperObject rv = null;
		Token tOpr;
		int line = 0, column = 0;
		WrapperObject retv = null;
		tOpr = jj_consume_token(97);
		rv = primaryExpression(isDo);
		if (isDo) {
			line = token_source.input_stream.getBeginLine();
			column = token_source.input_stream.getBeginColumn();
		}
		if (isDo) {
			Object v = rv.getValue();
			// 如果是字符串，区分是否变量名还是字符串常量
			WfVar var = null;
			Object varValue = null;
			if (v instanceof String) {
				String s = (String) v;
				if (s.charAt(0) != '\"') {
					// 字符串没有带双引号，那么就是变量名
					// 查找局部变量，全局变量不能改变值，要用SET语句
					if (mode == 1)
						var = findVariable(s);
					if (mode == 2)
						var = findLocalVariable(s);
					if (var == null) {
						if (true)
							throw new ParseException(
									"\u53d8\u91cf\u672a\u5b9a\u4e49, \u53d8\u91cf\u540d: "
											+ s + " , \u884c\u53f7: " + line
											+ " \u5217\u53f7: " + column);
					}
				} else {
					if (true)
						throw new ParseException(
								"\u6570\u636e\u5bf9\u8c61\u4e0d\u80fd\u8fdb\u884c\u81ea\u51cf\u64cd\u4f5c, \u884c\u53f7: "
										+ line + " \u5217\u53f7: " + column);
				}
				varValue = var.getValue();
				if (varValue == null || !(varValue instanceof Number)) {
					if (true)
						throw new ParseException(
								"\u6570\u636e\u5bf9\u8c61\u4e0d\u80fd\u8fdb\u884c\u81ea\u51cf\u64cd\u4f5c, \u884c\u53f7: "
										+ line + " \u5217\u53f7: " + column);
				}
			}
			double n = 0.0;
			if (var != null) {
				n = ((Number) varValue).doubleValue();
				n = n - 1.0;
				try {
					var.setValue(new Double(n));
				} catch (Exception e) {
				}
				retv = new WrapperObject();
				retv.setContainer(var);
				retv.setValue(var.getValue()); // 实际返回的值
				{
					if (true)
						return retv;
				}
			} else if (v instanceof Number) {
				retv = new WrapperObject();
				n = ((Number) v).doubleValue();
				retv.setValue(new Double(n - 1.0));
				{
					if (true)
						return retv;
				}
			} else {
				if (true)
					throw new ParseException(
							"\u6570\u636e\u5bf9\u8c61\u4e0d\u80fd\u8fdb\u884c\u81ea\u51cf\u64cd\u4f5c, \u884c\u53f7: "
									+ tOpr.endLine
									+ " \u5217\u53f7: "
									+ tOpr.endColumn);
			}
		} else {
			if (true)
				return null;
		}
		throw new Error("Missing return statement in function");
	}

	final public WrapperObject unaryExpressionNotPlusMinus(boolean isDo)
			throws ParseException {
		WrapperObject rv;
		Token tOpr = null;
		WrapperObject retv;
		switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
		case 98:
		case 99:
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
			case 98:
				tOpr = jj_consume_token(98);
				break;
			case 99:
				tOpr = jj_consume_token(99);
				break;
			default:
				jj_la1[18] = jj_gen;
				jj_consume_token(-1);
				throw new ParseException();
			}
			rv = unaryExpression(isDo);
			if (isDo) {
				Object v = rv.getValue();
				Object v1 = convertVariableNameAndString(v, tOpr.endLine,
						tOpr.endColumn);
				if (tOpr.image.equals("~")) {
					Long n = convertToLong(v1, tOpr.endLine, tOpr.endColumn);
					retv = new WrapperObject();
					retv.setValue(new Long(~(n.longValue())));
					{
						if (true)
							return retv;
					}
				} else if (tOpr.image.equals("!")) {
					boolean b = convertToBoolean(v1);
					retv = new WrapperObject();
					retv.setValue(new Boolean(!b));
					{
						if (true)
							return retv;
					}
				}
			} else {
				if (true)
					return null;
			}
			break;
		case NULL:
		case TRUE:
		case FALSE:
		case INTEGER_LITERAL:
		case FLOATING_POINT_LITERAL:
		case CHARACTER_LITERAL:
		case STRING_LITERAL:
		case IDENTIFIER:
		case LPAREN:
			retv = postfixExpression(isDo);
			if (isDo) {
				{
					if (true)
						return retv;
				}
			} else {
				if (true)
					return null;
			}
			break;
		default:
			jj_la1[19] = jj_gen;
			jj_consume_token(-1);
			throw new ParseException();
		}
		throw new Error("Missing return statement in function");
	}

	final public WrapperObject postfixExpression(boolean isDo)
			throws ParseException {
		WrapperObject rv;
		WrapperObject retv = null;
		Object v = null;
		int exprType = 0;
		Token tOpr = null;
		int line = 0, column = 0;
		rv = primaryExpression(isDo);
		if (isDo) {
			line = token_source.input_stream.getBeginLine();
			column = token_source.input_stream.getBeginColumn();
		}
		switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
		case IS:
		case 96:
		case 97:
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
			case 96:
				tOpr = jj_consume_token(96);
				exprType = 1;
				break;
			case 97:
				tOpr = jj_consume_token(97);
				exprType = 1;
				break;
			case IS:
				jj_consume_token(IS);
				jj_consume_token(EMPTY);
				exprType = 2;
				break;
			default:
				jj_la1[20] = jj_gen;
				jj_consume_token(-1);
				throw new ParseException();
			}
			break;
		default:
			jj_la1[21] = jj_gen;
			;
		}
		if (isDo && exprType == 1) {
			v = rv.getValue();
			// 如果是字符串，区分是否变量名还是字符串常量
			WfVar var = null;
			Object varValue = null;
			if (v instanceof String) {
				String s = (String) v;
				if (s.charAt(0) != '\"') {
					// 字符串没有带双引号，那么就是变量名
					// 查找局部变量，全局变量不能改变值，要用SET语句
					if (mode == 1)
						var = findVariable(s); // 可以对全局变量进行修改
					if (mode == 2)
						var = findLocalVariable(s); // 只能对局部变量进行修改
					if (var == null) {
						if (true)
							throw new ParseException(
									"\u53d8\u91cf\u672a\u5b9a\u4e49, \u53d8\u91cf\u540d: "
											+ s + " , \u884c\u53f7: " + line
											+ " \u5217\u53f7: " + column);
					}
				} else {
					if (true)
						throw new ParseException(
								"\u5b57\u7b26\u4e32\u4e0d\u80fd\u8fdb\u884c\u81ea\u589e\u51cf\u64cd\u4f5c, \u884c\u53f7: "
										+ line + " \u5217\u53f7: " + column);
				}
				varValue = var.getValue();
				if (varValue == null || !(varValue instanceof Number)) {
					if (true)
						throw new ParseException(
								"\u6570\u636e\u5bf9\u8c61\u4e0d\u80fd\u8fdb\u884c\u81ea\u589e\u51cf\u64cd\u4f5c, \u884c\u53f7: "
										+ line + " \u5217\u53f7: " + column);
				}
			}
			double n = 0.0;
			if (var != null) {
				n = ((Number) varValue).doubleValue();
				if (tOpr.image.equals("++"))
					n = n + 1.0;
				else if (tOpr.image.equals("--"))
					n = n - 1.0;
				try {

					var.setValue(new Double(n));
				} catch (Exception e) {
				}
				retv = new WrapperObject();
				retv.setValue(varValue); // 实际返回的值
			} else if (v instanceof Number) {
				n = ((Number) v).doubleValue();
				retv = new WrapperObject();
				if (tOpr.image.equals("++")) {
					retv.setValue(new Double(n + 1.0));
				} else if (tOpr.image.equals("--")) {
					retv.setValue(new Double(n - 1.0));
				}
			} else {
				if (true)
					throw new ParseException(
							"\u6570\u636e\u5bf9\u8c61\u4e0d\u80fd\u8fdb\u884c\u81ea\u589e\u51cf\u64cd\u4f5c, \u884c\u53f7: "
									+ line + " \u5217\u53f7: " + column);
			}
		}
		if (isDo && exprType == 2) {
			v = convertVariableNameAndString(rv.getValue(), line, column);
			// 判定集合类型的集合是否为空
			if (!(v instanceof Set)) {
				if (true)
					throw new ParseException(
							"\u96c6\u5408\u8fd0\u7b97\u7b26 IS EMPTY \u7684\u5de6\u8fb9\u8868\u8fbe\u5f0f\u7684\u503c\u4e0d\u662f\u96c6\u5408\u7c7b\u578b, \u884c\u53f7:"
									+ line + " \u5217\u53f7: " + column);
			}
			Set pset = (Set) v;
			retv = new WrapperObject();
			if (pset == null) {
				retv.setValue(new Boolean(true));
			} else {
				retv.setValue(new Boolean(pset.isEmpty()));
			}
		}
		if (isDo) {
			if (exprType != 0) {
				if (true)
					return retv;
			} else {
				{
					if (true)
						return rv;
				}
			}
		} else {
			if (true)
				return null;
		}
		throw new Error("Missing return statement in function");
	}

	/**
	 * 在该函数中不能去掉字符串的首尾双引号, 以便在上层区分字符串还是变量名
	 */
	final public WrapperObject primaryExpression(boolean isDo)
			throws ParseException {
		WrapperObject rv1 = null, rv2 = null;
		WrapperObject tmpv = null;
		int line = 0, column = 0;
		boolean havingSuffix = false, first = true;
		rv1 = primaryPrefix(isDo);
		if (isDo) {
			line = token_source.input_stream.getEndLine();
			column = token_source.input_stream.getEndColumn();
		}
		tmpv = rv1;
		label_11: while (true) {
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
			case LPAREN:
			case LBRACKET:
				;
				break;
			default:
				jj_la1[22] = jj_gen;
				break label_11;
			}
			rv2 = primarySuffix(isDo, tmpv);
			havingSuffix = true;
			tmpv = rv2;
		}
		if (isDo) {
			if (havingSuffix) {
				{
					if (true)
						return rv2;
				}
			} else {
				{
					if (true)
						return rv1;
				}
			}
		} else {
			if (!havingSuffix) {
				// 保存变量名，只能保存没有primarySuffix的情况
				Object v = null;
				if (rv1 != null)
					v = rv1.getValue();
				if (v != null && v instanceof String) {
					String s = (String) v;
					if (s.length() > 0 && s.charAt(0) != '\"') {
						if (varNameSet != null)
							varNameSet.add(s);
					}
				}
			} // not havingSuffix
			{
				if (true)
					return null;
			}
		}
		throw new Error("Missing return statement in function");
	}

	final public WrapperObject primaryPrefix(boolean isDo)
			throws ParseException {
		Object v;
		Token t;
		WrapperObject retv = null;
		switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
		case NULL:
		case TRUE:
		case FALSE:
		case INTEGER_LITERAL:
		case FLOATING_POINT_LITERAL:
		case CHARACTER_LITERAL:
		case STRING_LITERAL:
			retv = literal(isDo);
			if (isDo) {
				if (true)
					return retv;
			} else {
				if (true)
					return null;
			}
			break;
		case LPAREN:
			jj_consume_token(LPAREN);
			v = expression(isDo);
			jj_consume_token(RPAREN);
			if (isDo) {
				retv = new WrapperObject();
				if (v instanceof String) {
					retv.setValue("\"" + ((String) v) + "\"");
				} else
					retv.setValue(v);
				{
					if (true)
						return retv;
				}
			} else {
				if (true)
					return null;
			}
			break;
		case IDENTIFIER:
			t = jj_consume_token(IDENTIFIER);
			// isDo为false时不能返回null，取变量名要用
			retv = new WrapperObject();
			retv.setValue(t.image);
			{
				if (true)
					return retv;
			}
			break;
		default:
			jj_la1[23] = jj_gen;
			jj_consume_token(-1);
			throw new ParseException();
		}
		throw new Error("Missing return statement in function");
	}

	final public WrapperObject primarySuffix(boolean isDo,
			WrapperObject prefixValueWapper) throws ParseException {
		ArrayList argList = null;
		Object v = null;
		int line = 0, column = 0;
		Object tmpv = null;
		WrapperObject retv = null;
		Token t = null;
		boolean isCallObjFunc = false;
		switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
		case LBRACKET:
			jj_consume_token(LBRACKET);
			if (isDo) {
				line = token_source.input_stream.getBeginLine();
				column = token_source.input_stream.getBeginColumn();
			}
			v = expression(isDo);
			jj_consume_token(RBRACKET);
			if (isDo) {
				Object prefixValue = convertVariableNameAndString(
						prefixValueWapper.getValue(), line, column);
				if (prefixValue == null) {
					if (true)
						throw new ParseException(
								"\u6570\u636e\u5bf9\u8c61\u4e3a\u7a7a, \u4e0d\u80fd\u6267\u884c\u4e0b\u6807\u8fd0\u7b97, \u884c\u53f7: "
										+ line + " \u5217\u53f7: " + column);
				}
				if (v == null) {
					if (true)
						throw new ParseException(
								"\u4e0b\u6807\u503c\u4e3a\u7a7a, \u884c\u53f7: "
										+ line + " \u5217\u53f7: " + column);
				}
				if (prefixValue instanceof java.util.Map) {// wfInstance Map
					retv = new WrapperObject();
					java.util.Map map = (java.util.Map) prefixValue;
					retv.setContainer(prefixValue);
					retv.setIndex(v);
					retv.setIndexType(1); // 数组或映射表的下标
					Object vv = map.get(v);
					if (vv == null)
						retv.setValue(vv);
					else {
						if (vv instanceof String)
							retv.setValue("\"" + ((String) vv) + "\"");
						else
							retv.setValue(vv);
					}
					{
						if (true)
							return retv;
					}
				} // end wfInstance Map
				else if (prefixValue instanceof java.util.List) { // wfInstance
																	// List
					if (!(v instanceof Number)) {
						if (true)
							throw new ParseException(
									"\u4e0b\u6807\u4e0d\u662f\u6570\u503c\u7c7b\u578b, \u4e0d\u80fd\u5bf9java.util.List\u7c7b\u578b\u7684\u6570\u636e\u5bf9\u8c61\u6267\u884c\u4e0b\u6807\u8fd0\u7b97, \u884c\u53f7: "
											+ line + " \u5217\u53f7: " + column);
					}
					retv = new WrapperObject();
					java.util.List list = (java.util.List) prefixValue;
					retv.setContainer(prefixValue);
					retv.setIndex(v);
					retv.setIndexType(1); // 数组或映射表的下标
					int index = ((Number) v).intValue();
					Object vv = null;
					if (index < list.size())
						vv = list.get(index);
					if (vv == null)
						retv.setValue(vv);
					else {
						if (vv instanceof String)
							retv.setValue("\"" + ((String) vv) + "\"");
						else
							retv.setValue(vv);
					}
					{
						if (true)
							return retv;
					}
				} // end wfInstance List
				else {
					if (true)
						throw new ParseException(
								"\u6570\u636e\u5bf9\u8c61\u4e0d\u662fjava.util.Map\u6216java.util.List\u7c7b\u578b, \u4e0d\u80fd\u6267\u884c\u4e0b\u6807\u8fd0\u7b97, \u884c\u53f7: "
										+ line + " \u5217\u53f7: " + column);
				}
			}// end isDo
			else {
				// 保存变量名
				Object prefixValue = null;
				if (prefixValueWapper != null)
					prefixValue = prefixValueWapper.getValue();
				if (prefixValue != null && (prefixValue instanceof String)) {
					String s = (String) prefixValue;
					if (s.length() > 0 && s.charAt(0) != '\"') {// 变量名字
						if (varNameSet != null)
							varNameSet.add(s);
					}
				}
				// ---------------
				{
					if (true)
						return null;
				}
			}
			break;
		case LPAREN:
			line = token_source.input_stream.getBeginLine();
			column = token_source.input_stream.getBeginColumn();
			argList = arguments(isDo);
			break;
		default:
			jj_la1[24] = jj_gen;
			jj_consume_token(-1);
			throw new ParseException();
		}
		throw new Error("Missing return statement in function");
	}

	/**
	 * 返回参数表，对象的ArrayList
	 */
	final public ArrayList arguments(boolean isDo) throws ParseException {
		ArrayList argList = new ArrayList();
		jj_consume_token(LPAREN);
		switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
		case NULL:
		case TRUE:
		case FALSE:
		case INTEGER_LITERAL:
		case FLOATING_POINT_LITERAL:
		case CHARACTER_LITERAL:
		case STRING_LITERAL:
		case IDENTIFIER:
		case LPAREN:
		case 91:
		case 92:
		case 96:
		case 97:
		case 98:
		case 99:
			argList = argumentList(isDo);
			break;
		default:
			jj_la1[25] = jj_gen;
			;
		}
		jj_consume_token(RPAREN);
		if (isDo) {
			if (true)
				return argList;
		} else {
			if (true)
				return null;
		}
		throw new Error("Missing return statement in function");
	}

	/**
	 * 返回参数表, 对象的ArrayList
	 */
	final public ArrayList argumentList(boolean isDo) throws ParseException {
		ArrayList argList = new ArrayList();
		Object v1, v2;
		v1 = expression(isDo);
		if (isDo) {
			argList.add(v1);
		}
		label_12: while (true) {
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
			case COMMA:
				;
				break;
			default:
				jj_la1[26] = jj_gen;
				break label_12;
			}
			jj_consume_token(COMMA);
			v2 = expression(isDo);
			if (isDo)
				argList.add(v2);
		}
		if (isDo) {
			if (true)
				return argList;
		} else {
			if (true)
				return null;
		}
		throw new Error("Missing return statement in function");
	}

	/**
	 * 返回整数、双精度浮点、字符、字符串、布尔、null
	 */
	final public WrapperObject literal(boolean isDo) throws ParseException {
		Object v = null;
		Token t;
		WrapperObject retv = null;
		switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
		case INTEGER_LITERAL:
			t = jj_consume_token(INTEGER_LITERAL);
			if (isDo) {
				retv = new WrapperObject();
				retv.setValue(new Double(t.image));
				{
					if (true)
						return retv;
				}
			} else {
				if (true)
					return null;
			}
			break;
		case FLOATING_POINT_LITERAL:
			t = jj_consume_token(FLOATING_POINT_LITERAL);
			if (isDo) {
				retv = new WrapperObject();
				retv.setValue(new Double(t.image));
				{
					if (true)
						return retv;
				}
			} else {
				if (true)
					return null;
			}
			break;
		case CHARACTER_LITERAL:
			t = jj_consume_token(CHARACTER_LITERAL);
			// 去掉两头的单引号
			if (isDo) {
				retv = new WrapperObject();
				retv.setValue(convertCharacterLiteralToCharacter(t.image
						.substring(1, t.image.length() - 1)));
				{
					if (true)
						return retv;
				}
			} else {
				if (true)
					return null;
			}
			break;
		case STRING_LITERAL:
			t = jj_consume_token(STRING_LITERAL);
			if (isDo) {
				retv = new WrapperObject();
				retv.setValue(removeEscapes(t.image)); // 包含了两头的双引号
				{
					if (true)
						return retv;
				}
			} else {
				if (true)
					return null;
			}
			break;
		case TRUE:
		case FALSE:
			v = booleanLiteral();
			if (isDo) {
				retv = new WrapperObject();
				retv.setValue(v);
				{
					if (true)
						return retv;
				}
			} else {
				if (true)
					return null;
			}
			break;
		case NULL:
			v = nullLiteral();
			if (isDo) {
				retv = new WrapperObject();
				retv.setValue(v);
				{
					if (true)
						return retv;
				}
			} else {
				if (true)
					return null;
			}
			break;
		default:
			jj_la1[27] = jj_gen;
			jj_consume_token(-1);
			throw new ParseException();
		}
		throw new Error("Missing return statement in function");
	}

	final public Boolean booleanLiteral() throws ParseException {
		switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
		case TRUE:
			jj_consume_token(TRUE);
			{
				if (true)
					return T;
			}
			break;
		case FALSE:
			jj_consume_token(FALSE);
			{
				if (true)
					return F;
			}
			break;
		default:
			jj_la1[28] = jj_gen;
			jj_consume_token(-1);
			throw new ParseException();
		}
		throw new Error("Missing return statement in function");
	}

	final public Object nullLiteral() throws ParseException {
		jj_consume_token(NULL);
		{
			if (true)
				return null;
		}
		throw new Error("Missing return statement in function");
	}

	// *************************** END EXPRESSION ***************************

	// *************************** BEGIN CASE EXPRESSION
	// ***************************
	final public Object caseExpression(boolean isDo) throws ParseException {
		Token tWHEN;
		Object condExprResult, exprResult1, exprResult2 = null;
		boolean flag;
		boolean havingThen = false;
		Object result = null;
		jj_consume_token(CASE);
		label_13: while (true) {
			tWHEN = jj_consume_token(WHEN);
			condExprResult = expression(isDo);
			if (isDo) {
				if (condExprResult instanceof Boolean) {
					havingThen = ((Boolean) condExprResult).booleanValue();
				} else {
					if (true)
						throw new ParseException(
								"CASE\u8868\u8fbe\u5f0f\u7684WHEN\u5b50\u53e5\u4e0d\u662f\u4e00\u4e2a\u6761\u4ef6\u8868\u8fbe\u5f0f, \u884c\u53f7\uff1a"
										+ tWHEN.endLine
										+ " \u5217\u53f7\uff1a"
										+ (tWHEN.endColumn + 1));
				}
			}
			jj_consume_token(THEN);
			if (isDo) {
				if (result != null)
					havingThen = false;
			}
			exprResult1 = expression(isDo && havingThen);
			if (isDo) {
				if (havingThen && result == null)
					result = exprResult1;
			}
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
			case WHEN:
				;
				break;
			default:
				jj_la1[29] = jj_gen;
				break label_13;
			}
		}
		switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
		case ELSE:
			jj_consume_token(ELSE);
			if (isDo) {
				if (result != null)
					havingThen = true;
			}
			exprResult2 = expression(isDo && !havingThen);
			if (isDo) {
				if (result == null && !havingThen)
					result = exprResult2;
			}
			break;
		default:
			jj_la1[30] = jj_gen;
			;
		}
		jj_consume_token(END);
		jj_consume_token(CASE);
		if (isDo) {
			{
				if (true)
					return result;
			}
		} else {
			if (true)
				return null;
		}
		throw new Error("Missing return statement in function");
	}

	public ExpressionParserTokenManager token_source;
	JavaCharStream jj_input_stream;
	public Token token, jj_nt;
	private int jj_ntk;
	private int jj_gen;
	final private int[] jj_la1 = new int[31];
	static private int[] jj_la1_0;
	static private int[] jj_la1_1;
	static private int[] jj_la1_2;
	static private int[] jj_la1_3;
	static {
		jj_la1_0();
		jj_la1_1();
		jj_la1_2();
		jj_la1_3();
	}

	private static void jj_la1_0() {
		jj_la1_0 = new int[] { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
				0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
				0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x80000, 0x20000, };
	}

	private static void jj_la1_1() {
		jj_la1_1 = new int[] { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x120,
				0x120, 0x0, 0x0, 0x200, 0x200, 0x800, 0x800, 0x0, 0xe8f00000,
				0x0, 0xe8f00000, 0x40, 0x40, 0x0, 0xe8f00000, 0x0, 0xe8f00000,
				0x0, 0x68f00000, 0x600000, 0x0, 0x0, };
	}

	private static void jj_la1_2() {
		jj_la1_2 = new int[] { 0x1000, 0x2000, 0x4000, 0x8000, 0x10000,
				0x20000, 0xc0000, 0xc0000, 0xf00000, 0xf00000, 0x7000000,
				0x7000000, 0x18000000, 0x18000000, 0xe0000000, 0xe0000000,
				0x18000000, 0x18000004, 0x0, 0x4, 0x0, 0x0, 0x44, 0x4, 0x44,
				0x18000004, 0x200, 0x0, 0x0, 0x0, 0x0, };
	}

	private static void jj_la1_3() {
		jj_la1_3 = new int[] { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
				0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf, 0xc, 0xc, 0x3,
				0x3, 0x0, 0x0, 0x0, 0xf, 0x0, 0x0, 0x0, 0x0, 0x0, };
	}

	public ExpressionParser(java.io.InputStream stream) {
		jj_input_stream = new JavaCharStream(stream, 1, 1);
		token_source = new ExpressionParserTokenManager(jj_input_stream);
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 31; i++)
			jj_la1[i] = -1;
	}

	public void ReInit(java.io.InputStream stream) {
		jj_input_stream.ReInit(stream, 1, 1);
		token_source.ReInit(jj_input_stream);
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 31; i++)
			jj_la1[i] = -1;
	}

	public ExpressionParser(java.io.Reader stream) {
		jj_input_stream = new JavaCharStream(stream, 1, 1);
		token_source = new ExpressionParserTokenManager(jj_input_stream);
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 31; i++)
			jj_la1[i] = -1;
	}

	public void ReInit(java.io.Reader stream) {
		jj_input_stream.ReInit(stream, 1, 1);
		token_source.ReInit(jj_input_stream);
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 31; i++)
			jj_la1[i] = -1;
	}

	public ExpressionParser(ExpressionParserTokenManager tm) {
		token_source = tm;
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 31; i++)
			jj_la1[i] = -1;
	}

	public void ReInit(ExpressionParserTokenManager tm) {
		token_source = tm;
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 31; i++)
			jj_la1[i] = -1;
	}

	final private Token jj_consume_token(int kind) throws ParseException {
		Token oldToken;
		if ((oldToken = token).next != null)
			token = token.next;
		else
			token = token.next = token_source.getNextToken();
		jj_ntk = -1;
		if (token.kind == kind) {
			jj_gen++;
			return token;
		}
		token = oldToken;
		jj_kind = kind;
		throw generateParseException();
	}

	final public Token getNextToken() {
		if (token.next != null)
			token = token.next;
		else
			token = token.next = token_source.getNextToken();
		jj_ntk = -1;
		jj_gen++;
		return token;
	}

	final public Token getToken(int index) {
		Token t = token;
		for (int i = 0; i < index; i++) {
			if (t.next != null)
				t = t.next;
			else
				t = t.next = token_source.getNextToken();
		}
		return t;
	}

	final private int jj_ntk() {
		if ((jj_nt = token.next) == null)
			return (jj_ntk = (token.next = token_source.getNextToken()).kind);
		else
			return (jj_ntk = jj_nt.kind);
	}

	private Vector<int[]> jj_expentries = new Vector<int[]>();
	private int[] jj_expentry;
	private int jj_kind = -1;

	public ParseException generateParseException() {
		jj_expentries.removeAllElements();
		boolean[] la1tokens = new boolean[100];
		for (int i = 0; i < 100; i++) {
			la1tokens[i] = false;
		}
		if (jj_kind >= 0) {
			la1tokens[jj_kind] = true;
			jj_kind = -1;
		}
		for (int i = 0; i < 31; i++) {
			if (jj_la1[i] == jj_gen) {
				for (int j = 0; j < 32; j++) {
					if ((jj_la1_0[i] & (1 << j)) != 0) {
						la1tokens[j] = true;
					}
					if ((jj_la1_1[i] & (1 << j)) != 0) {
						la1tokens[32 + j] = true;
					}
					if ((jj_la1_2[i] & (1 << j)) != 0) {
						la1tokens[64 + j] = true;
					}
					if ((jj_la1_3[i] & (1 << j)) != 0) {
						la1tokens[96 + j] = true;
					}
				}
			}
		}
		for (int i = 0; i < 100; i++) {
			if (la1tokens[i]) {
				jj_expentry = new int[1];
				jj_expentry[0] = i;
				jj_expentries.addElement(jj_expentry);
			}
		}
		int[][] exptokseq = new int[jj_expentries.size()][];
		for (int i = 0; i < jj_expentries.size(); i++) {
			exptokseq[i] = (int[]) jj_expentries.elementAt(i);
		}
		return new ParseException(token, exptokseq, tokenImage);
	}

	final public void enable_tracing() {
	}

	final public void disable_tracing() {
	}

}
